package hu.bme.mit.ttc.imdb.queries

import "http://movies/1.0"


// support
pattern personName(p, pName) {
	Person.name(p, pName);
}

pattern cast(name, M) {
	Movie.persons.name(M, name);
}

// Couple patterns
pattern personsToCouple(p1name, p2name) {
	find cast(p1name, M1); find cast(p2name, M1);
	find cast(p1name, M2); find cast(p2name, M2);
	find cast(p1name, M3); find cast(p2name, M3);
	
	M1 != M2; M2 != M3; M1 != M3;
	
	check(p1name < p2name);
}

pattern commonMoviesToCouple(p1name, p2name, m) {
	find personsToCouple(p1name, p2name);
	
	Person.movies(p1, m);
	Person.movies(p2, m);
	Person.name(p1,p1name);
	Person.name(p2,p2name);

	check(p1name < p2name);
}

// Task 3
// Average rankings
@QueryExplorer(display = false)
pattern couple(c, p1, p2) {
	Couple.p1(c, p1);
	Couple.p2(c, p2);
}

// Extension Task 1
pattern commonMoviesOfCouple(c, m) {
	Couple.commonMovies(c, m);
}

pattern coupleWithRating(c, avgRating) {
	Couple.avgRating(c, avgRating);
}

pattern countOfCommonMoviesOfCouple(p1, p2, n) {
	find couple(c, p1, p2);
	n == count find commonMoviesOfCouple(c, _m);
}

// ET2
// Clique patterns
pattern personsTo3Clique(P1, P2, P3) {
	find cast(P1, M1); find cast(P2, M1); find cast(P3, M1);
	find cast(P1, M2); find cast(P2, M2); find cast(P3, M2);
	find cast(P1, M3); find cast(P2, M3); find cast(P3, M3);
	
	M1 != M2; M2 != M3; M1 != M3;
	
	check(P1 < P2); check(P2 < P3);
}

pattern personsTo4Clique(P1, P2, P3, P4) {
	find cast(P1, M1); find cast(P2, M1); find cast(P3, M1); find cast(P4, M1);
	find cast(P1, M2); find cast(P2, M2); find cast(P3, M2); find cast(P4, M2);
	find cast(P1, M3); find cast(P2, M3); find cast(P3, M3); find cast(P4, M3);
	
	M1 != M2; M2 != M3; M1 != M3;
	
	check(P1 < P2); check(P2 < P3); check(P3 < P4);
}

pattern personsTo5Clique(P1, P2, P3, P4, P5) {
	find cast(P1, M1); find cast(P2, M1); find cast(P3, M1); find cast(P4, M1); find cast(P5, M1);
	find cast(P1, M2); find cast(P2, M2); find cast(P3, M2); find cast(P4, M2); find cast(P5, M2);
	find cast(P1, M3); find cast(P2, M3); find cast(P3, M3); find cast(P4, M3); find cast(P5, M3);
	
	M1 != M2; M2 != M3; M1 != M3;
	
	check(P1 < P2); check(P2 < P3); check(P3 < P4); check(P4 < P5);
}

// Patterns to search group with specific size
pattern memberOfGroup(person, group) {
	Couple.p1(group,person);
} or {
	Couple.p2(group,person);
} or {
	Clique.persons(group, person);
}

pattern groupSize(group, S) {
	Group(group);
	S == count find memberOfGroup(_, group);
}