package hu.bme.mit.ttc.imdb.queries

import "http://movies/1.0"

// Task 2
// Couples
pattern playedTogetherIn(p1name, p2name, m) {
	Person.movies(p1, m);
	Movie.persons(m, p2);

	find personName(p1, p1name);
	find personName(p2, p2name);

	check(p1name < p2name);
}

pattern personsToCouple(p1name, p2name) {
	find playedTogetherIn(p1name, p2name, _anymovie);
	find playedTogetherIn(p1name, p2name, m1);
	find playedTogetherIn(p1name, p2name, m2);
	find playedTogetherIn(p1name, p2name, m3);
	m1 != m2;
	m2 != m3;
	m1 != m3;
	//N == count find playedTogetherIn(p1name, p2name, _m);
	//check(N >= 3);
}

pattern personName(p, pName) {
	Person.name(p, pName);
}

pattern commonMoviesToCouple(p1, p2, m) {
	find personsToCouple(p1, p2);
	find playedTogetherIn(p1, p2, m);
}

// Task 3
// Average rankings
pattern couple(c, p1, p2) {
	Couple.p1(c, p1);
	Couple.p2(c, p2);
}

//pattern coupleWithRating(p1, p2, avgRating) {
//	find couple(c, p1, p2);
//	Couple.avgRating(c, avgRating);	
//}

// Extension Task 1
// Top-15 Couples
pattern commonMoviesOfCouple(c, m) {
	Couple.commonMovies(c, m);
}

pattern coupleWithRating(c, avgRating) {
	Couple.avgRating(c, avgRating);
}

pattern countOfCommonMoviesOfCouple(p1, p2, n) {
	find couple(c, p1, p2);
	n == count find commonMoviesOfCouple(c, _m);
}

// Extension Task 2
// Clique
pattern commonMoviesOfGroup(g, m) {
	Group.commonMovies(g, m);
}

// Groups
pattern group(g) {
	Group(g);
}

// a Group is either a Couple or a Clique
pattern memberOfGroup(p, g) {
	Couple.p1(g, p);
} or {
	Couple.p2(g, p);
} or {
	Clique.persons(g, p);
}

pattern commonMovieOfGroupAndPerson(g, p, m) {
	find commonMoviesOfGroup(g, m);
	Person.movies(p, m);
}

pattern nextCliques(g : Group, p : Person) {
	find commonMovieOfGroupAndPerson(g, p, m1);
	find commonMovieOfGroupAndPerson(g, p, m2);
	find commonMovieOfGroupAndPerson(g, p, m3);
	m1 != m2;
	m2 != m3;
	m1 != m3;
	neg find alphabeticallyLaterMemberOfGroup(g, p);
}

// this also filters the person in the parameter
pattern alphabeticallyLaterMemberOfGroup(g : Group, p : Person) {
	find memberOfGroup(m, g);
	find personName(p, pName);
	find personName(m, mName);
	check(mName >= pName);
}


